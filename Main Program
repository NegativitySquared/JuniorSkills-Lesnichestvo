#pragma config(Sensor, S1,     SensorLeft,     sensorLightActive)
#pragma config(Sensor, S2,     SensorRight,    sensorLightActive)
#pragma config(Sensor, S3,     SensorDistance, sensorSONAR)
#pragma config(Sensor, S4,     SensorColor,    sensorLightActive)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

#define BLACK 33
#define WHITE 48
#define WHEEL_DIAMETER 8.4
#define MotorRight motorC
#define MotorLeft motorB
#define LINE_WIDTH 5
#define CAN_LINE_LENGTH 14

float speed = 0.7;

void Initialize();
void TurnOntoCircle();
void Turn(int angle);
void TurnLeft();
void TurnRight();
void Turn180();
void GoToCan();
void MoveCanToZone();
task FollowLine();
task FollowLineBack();
void SetMotors(int a, int b);
task SensorDebug();
void GrabCan();
void LetObjectGo();
void GoBack();

task main()
{
	int i = 0;
	Initialize();
	startTask(SensorDebug);
	startTask(FollowLine);
	TurnOntoCircle();
	while(i != 6) // waiting until we find the circle exit
	{
		while(sensorValue[SensorLeft] > BLACK) // waiting until we find exit to can
			wait1Msec(10);

		stopTask(FollowLine);
		SetMotors(0, 0);
		wait1Msec(1000);

		if(sensorValue[SensorDistance] < 30) // if can is there
			GoToCan();
		else
		{
			nMotorEncoder[motorC] = 0;
			SetMotors(30, 30);
			while(nMotorEncoder[MotorC] < LINE_WIDTH/(PI*WHEEL_DIAMETER)*180)
				wait1Msec(10);
		  startTask(FollowLine);
		  wait1Msec(500);
		}
		i++;
	}
	while(sensorValue[SensorRight] > BLACK)
		wait1Msec(10);
  stopTask(FollowLine);
  SetMotors(0, 0);
  wait1Msec(1000);
  SetMotors(30, 30);
  while(sensorValue[SensorRight] < WHITE)
  	wait1Msec(10);
  TurnRight();
  startTask(FollowLine);
  wait1Msec(2500);
}

void Initialize()
{
	int OldMotorEncoder = -1;
	nMotorEncoder[motorA] = 0;
	nMotorEncoder[MotorC] = 0;
	nMotorEncoder[MotorB] = 0;
	motor[motorA] = -10;
	while(nMotorEncoder[motorA] != OldMotorEncoder)
	{
		OldMotorEncoder = nMotorEncoder[motorA];
		wait1Msec(50);
	}
	motor[motorA] = 0;
	nMotorEncoder[motorA] = 0; //now gripper is in fully closed position, i.e. 0
}

task SensorDebug()
{
	while(true)
	{
		displayTextLine(1, "right %i", sensorValue[SensorRight]);
		displayTextLine(2, "left %i", sensorValue[SensorLeft]);
		displayTextLine(3, "Sonar %i", SensorValue[SensorDistance]);
		displayTextLine(4, "color %i", SensorValue[Sensorcolor]);
	}
}

void TurnOntoCircle()
{
	while(SensorValue[SensorRight] > BLACK && SensorValue[SensorLeft] > BLACK)
		wait1Msec(10);
	stoptask(FollowLine);
	SetMotors(30, 30);
	while(SensorValue[SensorRight] < WHITE && SensorValue[SensorLeft] < WHITE)
		wait1Msec(10);
	SetMotors(0, 0);
	TurnRight();
	startTask(FollowLine);
}

void GoToCan()
{
	stopTask(FollowLine);
	LetObjectGo();
	SetMotors(20, 30);
	while(SensorValue[SensorLeft] < WHITE)
		wait1Msec(10);
	SetMotors(0, 0);
	wait1Msec(1000);
	TurnLeft();
	startTask(FollowLine);
	nMotorEncoder[MotorLeft] = 0;
	while(nMotorEncoder[MotorLeft] < CAN_LINE_LENGTH/(WHEEL_DIAMETER)*180)
		wait1Msec(10);
	stopTask(FollowLine);
	SetMotors(0, 0);
	wait1Msec(1000);
	if(SensorValue[SensorColor] < 35)
		MoveCanToZone();
	else
		GoBack();
}

void GoBack()
{
	wait1Msec(1000);
	SetMotors(-30, -30);
	nMotorEncoder[MotorLeft] = 0;
	while(nMotorEncoder[MotorLeft] > -CAN_LINE_LENGTH/(WHEEL_DIAMETER)*180)
		wait1Msec(10);
	SetMotors(0, 0);
	wait1Msec(1000);
	SetMotors(-30, -30);
	nMotorEncoder[motorB] = 0;
	while(nMotorEncoder(motorB) > -4/(WHEEL_DIAMETER*PI)*180)
		wait1Msec(10);
	SetMotors(0, 0);
	wait1Msec(1000);
	TurnRight();
	GrabCan();
	startTask(FollowLine);
	wait1Msec(1000);

}

void TurnLeft()
{
	float ROBOT_WIDTH = 17.5;
	int TargetEncoderValue = (PI/2 * ROBOT_WIDTH) / (PI*WHEEL_DIAMETER) * 180;
	nMotorEncoder[MotorRight] = 0;
	SetMotors(-30, 30);
	while(nMotorEncoder[MotorRight] < TargetEncoderValue)
		wait1Msec(10);
	SetMotors(0, 0);
}

void TurnRight()
{
	float ROBOT_WIDTH = 17.5;
	int TargetEncoderValue = (PI/4 * ROBOT_WIDTH) / (PI*WHEEL_DIAMETER) * 180 * 1.3;
	nMotorEncoder[MotorRight] = 0;
	SetMotors(30, -30);
	while(nMotorEncoder[MotorRight] > -TargetEncoderValue)
		wait1Msec(10);
	SetMotors(0, 0);
}

void Turn180()
{
	float ROBOT_WIDTH = 17.5;
	int TargetEncoderValue = (PI * ROBOT_WIDTH) / (PI*WHEEL_DIAMETER) * 180;
	nMotorEncoder[MotorRight] = 0;
	SetMotors(30, -30);
	while(nMotorEncoder[MotorRight] > -TargetEncoderValue)
		wait1Msec(10);
	SetMotors(0, 0);
}

void MoveCanToZone()
{
	GrabCan();
	Turn180();
	startTask(FollowLine);
	while(SensorValue[SensorRight] > BLACK && SensorValue[SensorLeft] > BLACK)
		wait1Msec(10);
  stopTask(FollowLine);
  SetMotors(20, 20);
	wait1Msec(200);
	while(SensorValue[SensorRight] < WHITE && SensorValue[SensorLeft] < WHITE)
		wait1Msec(10);
  SetMotors(0, 0);
  wait1Msec(1000);

	SetMotors(20, 20);
	nMotorEncoder[motorB] = 0;
	while(nMotorEncoder[motorB] < 20/(WHEEL_DIAMETER*PI)*180)
		wait1Msec(10);
	SetMotors(0, 0);

	LetObjectGo();

	SetMotors(-30, -30)
	wait1Msec(200);
	while(SensorValue[SensorRight] < WHITE && SensorValue[SensorLeft] < WHITE)
		wait1Msec(10);
	while(SensorValue[SensorRight] > BLACK && SensorValue[SensorLeft] > BLACK)
		wait1Msec(10);
	SetMotors(0, 0);
	GrabCan();
	SetMotors(30, 30);
	nMotorEncoder[motorB] = 0;
	while(SensorValue[SensorRight] < WHITE && SensorValue[SensorLeft] < WHITE)
		wait1Msec(10);

	TurnLeft();
	startTask(FollowLine);
	wait1Msec(1000);
}

void GrabCan()
{
	int OldMotorEncoder = 1;
	nMotorEncoder[motorA] = 0;
	motor[motorA] = -30;
	while(nMotorEncoder[motorA] != OldMotorEncoder)
	{
		OldMotorEncoder = nMotorEncoder[motorA];
		wait1Msec(50);
	}
	motor[motorA] = 0;
	/*while(nMotorEncoder[motorA] < -90)
	{
	OldMotorEncoder = nMotorEncoder[motorA];
	wait1Msec(10);
	if(nMotorEncoder[motorA] != OldMotorEncoder)
	break;
	}
	motor[motorA] = 0;
	*/
}

void LetObjectGo()
{
	nMotorEncoder[motorA] = 0;
	motor[motorA] = 30;
	while(nMotorEncoder[motorA] < 90)
		wait1Msec(10);
	motor[motorA] = 0;
}

task FollowLine()
{
	float kp = 2, kd = 1.7;
	float d, d_pr = 0;
	float change;
	while(true)
	{
		d = SensorValue[SensorLeft] - SensorValue[SensorRight] + 2;
		change = kp*d - 0*kd*(d - d_pr);
		d_pr = d;
		motor[MotorLeft] = (40 + change) * speed;
		motor[MotorRight] = (40 - change) * speed;

	}
}

task FollowLineBack()
{
	float kp = 2, kd = 1.7;
	float d, d_pr = 0;
	float change;
	while(true)
	{
		d = SensorValue[SensorLeft] - SensorValue[SensorRight] + 2;
		change = kp*d - 0*kd*(d - d_pr);
		d_pr = d;
		motor[MotorLeft] = (-40 + change) * speed;
		motor[MotorRight] = (-40 - change) * speed;

	}
}


void SetMotors(int a, int b)
{
	motor[MotorLeft] = a;
	motor[MotorRight] = b;
}
